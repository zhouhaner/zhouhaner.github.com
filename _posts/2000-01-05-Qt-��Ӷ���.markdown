---
layout: post
title: "Qt-添加动作" 
comments: true
share: true
tags: Qt
---



----------

Qt 使用QAction类作为动作。这个类就是代表了窗口的一个“动作”，这个动作可能显示在菜单，作为一个菜单项，当用户点击该菜单项，对用户的点击做出响应；也可能在工具栏，作为一个工具栏按钮，用户点击这个按钮就可以执行相应的操作。

无论是出现在菜单栏还是工具栏，用户选择之后，所执行的动作应该都是一样的。因此，Qt 并没有专门的菜单项类，只是使用一个QAction类，抽象出公共的动作。当我们把QAction对象添加到菜单，就显示成一个菜单项，添加到工具栏，就显示成一个工具按钮。用户可以通过点击菜单项、点击工具栏按钮、点击快捷键来激活这个动作。

QAction包含了图标、菜单文字、快捷键、状态栏文字、浮动帮助等信息。当把一个QAction对象添加到程序中时，Qt 自己选择使用哪个属性来显示，无需我们关心。同时，Qt 能够保证把QAction对象添加到不同的菜单、工具栏时，显示内容是同步的。也就是说，如果我们在菜单中修改了QAction的图标，那么在工具栏上面这个QAction所对应的按钮的图标也会同步修改。



## mainwindow.h ##

	#ifndef MAINWINDOW_H
	#define MAINWINDOW_H
	
	#include <QMainWindow>
	
	namespace Ui {
	class MainWindow;
	}
	
	class MainWindow : public QMainWindow
	{
	    Q_OBJECT
	
	public:
	    explicit MainWindow(QWidget *parent = 0);
	    ~MainWindow();
	
	private:
	    void open();
	    QAction *openAction;
	    Ui::MainWindow *ui;
	};
	
	#endif // MAINWINDOW_H


## mainwindow.cpp ##

![](http://files.devbean.net/images/2012/08/mw-action.png)

	
	#include "mainwindow.h"
	#include "ui_mainwindow.h"
	#include <QAction>
	#include <QMenuBar>
	#include <QMessageBox>
	#include <QStatusBar>
	#include <QToolBar>
	
	MainWindow::MainWindow(QWidget *parent) : //构造函数
	    QMainWindow(parent),
	    ui(new Ui::MainWindow)
	{
	    ui->setupUi(this);  //系统默认的
	
	    setWindowTitle(tr("Main Window"));//调用了setWindowTitle()，设置主窗口的标题。
	    //注意我们的文本使用tr()函数，这是一个用于 Qt 国际化的函数。
	    //我们可以使用 Qt 提供的国际化工具，将tr()函数的字符串提取出来，进行国际化。
	    //由于所需进行国际化的文本应该被大多数人认识，所以，tr()函数里面一般会是英文文本。
	
	
	    openAction = new QAction(QIcon(":/images/doc-open"),tr("&Open..."), this);
	    //在堆（因为用了new）上创建了openAction对象。在QAction构造函数，我们传入了一个图标、一个文本和 this 指针。
	    //图标我们使用了QIcon，传入值是一个字符串，这个字符串对应于 Qt 资源文件中的一段路径。Qt 资源文件的后缀名是qrc。
	    //如果我们使用 Qt Creator，我们可以在新建文件中看到 Qt 资源文件。Qt 资源文件其实是一个 XML 描述的文件，表示 Qt 应用程序所需要的各个资源。
	    //（注意，资源文件需要在 pro 文件中使用 RESOURCES 引入。）
	    //QIcon的参数，以 : 开始，意味着从资源文件中查找资源。:/images/doc-open就是找到了这里的 document-open.png 这个文件。
	    //QAction第二个参数中，文本值前面有一个 &，意味着这将成为一个快捷键。注意看截图中 File 的 F 有一个下划线。
	
	    openAction->setShortcut(QKeySequence::Open);
	    //这里使用了setShortcut()函数，用于说明这个QAction的快捷键。
	    //Qt 的QKeySequence为我们定义了很多内置的快捷键（即自身指定的快捷键）
	    //虽然我们也完全可以自己定义一个tr("Ctrl+O")来实现快捷键。但这样跨平台性不好了。
	    //使用QKeySequence类来添加快捷键，会根据平台的不同来定义相应的快捷键。
	
	    openAction->setStatusTip(tr("Open an existing file"));
	    //setStatusTip()则实现了当用户鼠标滑过这个 action 时，在主窗口下方的状态栏显示相应的提示。
	
	    connect(openAction,&QAction::triggered,this,&MainWindow::open);
	    //trigger是触发的意思，当用户点击了这个QAction时，会自动触发MainWindow的open()函数
	
	    //QMainWindow的函数——menuBar()，创建菜单栏
	    QMenu *file = menuBar()->addMenu((tr("&File")));
	    file->addAction(openAction);
	
	    //QMainWindow的函数——toolBar()，创建工具栏
	    QToolBar *toolBar = addToolBar(tr("&File"));
	    toolBar->addAction(openAction);
	
	    //QMainWindow的函数——statusBar()，创建状态栏
	    statusBar();
	}
	
	MainWindow::~MainWindow()
	{
	    delete ui;
	}
	
	
	void MainWindow::open(){
	    QMessageBox::information(this,tr("Information"),tr("Open"));
	}




## main.cpp ##

	#include "mainwindow.h"
	#include <QApplication>
	
	int main(int argc, char *argv[])
	{
	    QApplication a(argc, argv);
	    MainWindow w;
	    w.show();
	
	    return a.exec();
	}
