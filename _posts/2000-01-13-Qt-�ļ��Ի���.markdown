---
layout: post
title: "Qt-文件对话框" 
comments: true
share: true
tags: Qt
---


在前面讨论了 Qt 标准对话框QMessageBox

今天讨论另外一个标准对话框：QFileDialog -----文件对话框。

使用QFileDialog来打开一个文本文件，并将修改过的文件保存到硬盘。

完整代码如下：

## mainwindow.h ##

	#ifndef MAINWINDOW_H
	#define MAINWINDOW_H
	
	#include <QMainWindow>
	
	class QTextEdit;
	
	class MainWindow : public QMainWindow
	{
	    Q_OBJECT
	
	public:
	    explicit MainWindow(QWidget *parent = 0);
	    ~MainWindow();
	
	private slots:
	    void openFile();   //函数声明，并且要在private slots:内声明！
	    void saveFile();
	
	private:
	    QAction *openAction;   //别忘了添加私有成员！并指定为指针！！！
	    QAction *saveAction;
	
	    QTextEdit *textEdit;
	};
	
	#endif // MAINWINDOW_H
	


## mainwindow.cpp ##

	#include <QtGui>
	#include <QtWidgets>
	#include "mainwindow.h"
	
	MainWindow::MainWindow(QWidget *parent) :
	    QMainWindow(parent)
	{
	    openAction = new QAction(QIcon(":/images/file-open"), tr("&Open..."), this);
	    openAction->setShortcuts(QKeySequence::Open);
	    openAction->setStatusTip(tr("Open an existing file"));
	    connect(openAction, &QAction::triggered, this, &MainWindow::openFile);
	    //之所以这些参数前要加&是因为他们其实是函数！（openFile和saveFile函数要自己写）
	
	    saveAction = new QAction(QIcon(":/images/file-save"), tr("&Save..."), this);
	    saveAction->setShortcuts(QKeySequence::Save);
	    saveAction->setStatusTip(tr("Save a new file"));
	    connect(saveAction, &QAction::triggered, this, &MainWindow::saveFile);
	    //我们使用connect()函数，为这两个QAction对象添加响应的动作。
	
	    QMenu *file = menuBar()->addMenu(tr("&File"));
	    file->addAction(openAction);
	    file->addAction(saveAction);
	
	    QToolBar *toolBar = addToolBar(tr("&File"));
	    toolBar->addAction(openAction);
	    toolBar->addAction(saveAction);
	
	    textEdit = new QTextEdit(this);
	    //QTextEdit类用于显示富文本文件。即可显示文本、图片、表格等等。
	    setCentralWidget(textEdit);
	    //QMainWindow有一个setCentralWidget()函数，可将一个组件作为窗口的中心组件，放在窗口中央显示区。
	}
	
	MainWindow::~MainWindow()
	{
	}
	
	void MainWindow::openFile()
	{
	    //使用QFileDialog::getOpenFileName()来获取需要打开的文件的路径。
	    //这个函数的函数原型：
	//    QString getOpenFileName(QWidget * parent = 0,  //父窗口
	//                            const QString & caption = QString(),//对话框标题
	//                            const QString & dir = QString(), //对话框打开时的默认目录,
	                                                               //若为“.” 则代表程序运行目录
	                                                               //若为 “/” 则代表当前盘符的根目录
	//                            const QString & filter = QString(),//过滤器。用于过滤特定的后缀名。
	                                                               //用来规定只能打开特定类型的文件。
	                                                               //如果需要多个过滤器，使用“;;”分割
	//                            QString * selectedFilter = 0,    //默认选择的过滤器；
	//                            Options options = 0)             //对话框的一些参数设定，比如只显示文件夹等等
	                                                               //每个选项可以使用 | 运算组合起来。
	    //它的所有参数都是可选的
	
	    QString path = QFileDialog::getOpenFileName(this, tr("Open File"), ".", tr("Text Files(*.txt)"));
	    //QFileDialog::getOpenFileName()返回值是选择的文件路径。将其赋值给 path。
	
	    //通过判断 path 是否为空，可以确定用户是否选择了某一文件。
	    if(!path.isEmpty()) {
	        //创建一个QFile对象，将用户选择的文件路径传递给这个对象。
	        QFile file(path);
	
	        //QFile::open()，其参数是指定的打开方式。
	        //这里我们使用只读方式和文本方式打开这个文件，若成功则返回ture
	        if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
	            QMessageBox::warning(this, tr("Read File"), tr("Cannot open file:\n%1").arg(path));
	            return;
	        }//这是打开失败的时候弹出的警告
	
	        //使用QTextStream::readAll()读取文件所有内容，
	        //然后将其赋值给QTextEdit显示出来。
	        QTextStream in(&file);  //先绑定
	        textEdit->setText(in.readAll());  //setText()函数来放入文本内容
	        file.close();       //别忘了关闭文件
	    } else {
	        QMessageBox::warning(this, tr("Path"), tr("You did not select any file."));
	    }
	}
	
	void MainWindow::saveFile()
	{
	    QString path = QFileDialog::getSaveFileName(this, tr("Save File"), ".", tr("Text Files(*.txt)"));
	    if(!path.isEmpty()) {
	        QFile file(path);
	        if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
	            QMessageBox::warning(this, tr("Write File"), tr("Cannot open file:\n%1").arg(path));
	            return;
	        }
	        QTextStream out(&file);
	        out << textEdit->toPlainText();
	        file.close();
	    } else {
	        QMessageBox::warning(this, tr("Path"), tr("You did not select any file."));
	    }
	}



## main.cpp ##

	#include <QApplication>
	#include "mainwindow.h"
	
	int main(int argc, char *argv[])
	{
	    QApplication a(argc, argv);
	
	    MainWindow w;
	    w.show();
	
	    return a.exec();
	}



demo:

![](http://files.devbean.net/images/2012/09/qfiledialog-kde.png)