---
layout: post
title: "Qt-对话框简介" 
comments: true
share: true
tags: Qt
---


很多不能或者不适合放入主窗口的功能组件都必须放在对话框中设置。对话框通常会是一个顶层窗口，出现在程序最上层，用于实现短期任务或者简洁的用户交互。

Qt 中使用QDialog类实现对话框。就像主窗口一样，我们通常会设计一个 类 继承QDialog（Dialog是对话的意思）。

QDialog（及其子类，以及所有Qt::Dialog类型的类）对于其 parent 指针都有额外的解释：

- 如果 parent 为 NULL，则该对话框会作为一个顶层窗口（即这时，任务栏中显示两个窗口）

- 否则则作为其父组件的子对话框（此时，其默认出现的位置是 parent 的中心，默认比父对话框小，且任务栏中不单独出现一个任务）。

- 顶层窗口与非顶层窗口的区别在于，顶层窗口在任务栏会有自己的位置，而非顶层窗口则会共享其父组件的位置。

代码仍然延续上面的：

	#include "mainwindow.h"
	#include "ui_mainwindow.h"
	#include <QDialog>
	MainWindow::MainWindow(QWidget *parent) :
	    QMainWindow(parent),
	    ui(new Ui::MainWindow)
	{
	    ui->setupUi(this);
	
	    setWindowTitle(tr("Main Window"));
	
	    openAction = new QAction(QIcon(":/images/doc-open"),tr("Open..."),this);
	    openAction->setShortcuts(QKeySequence::Open);
	    openAction->setStatusTip(tr("Open an existing file"));
	    connect(openAction, &QAction::triggered, this, &MainWindow::open);
	
	    QMenu *file = menuBar()->addMenu(tr("&File"));
	    file->addAction(openAction);
	
	    QToolBar *toolBar = addToolBar(tr("&File"));
	    toolBar->addAction(openAction);
	
	}
	
	MainWindow::~MainWindow()
	{
	    delete ui;
	}
	//以上代码和之前一样
	//下面是关键
	void MainWindow::open(){
	
	    //用QDialog创建了一个对话框，设置其标题为“Hello, dialog!”，然后调用exec()将其显示出来。
	
	    QDialog dialog;  // 另一个版本：QDialog dialog(this);
	    dialog.setWindowTitle(tr("Hello , dialog!"));
	    dialog.exec();
	}


不加this时：

![](http://files.devbean.net/images/2012/09/dialog-without-parent.png)

加了this的版本会跳出很小的一个子对话框！


对话框分为模态对话框和非模态对话框。

所谓模态对话框，就是会阻塞同一应用程序中其它窗口的输入。模态对话框很常见，比如“打开文件”功能。你可以尝试一下记事本的打开文件，当打开文件对话框出现时，我们是不能对除此对话框之外的窗口部分进行操作的。

与此相反的是非模态对话框，例如查找对话框，我们可以在显示着查找对话框的同时，继续对记事本的内容进行编辑。

Qt 有两种级别的模态对话框：应用程序级别的模态和窗口级别的模态，默认是应用程序级别的模态。

应用程序级别的模态是指，当该种模态的对话框出现时，用户必须首先对对话框进行交互，直到关闭对话框，然后才能访问程序中其他的窗口。

窗口级别的模态是指，该模态仅仅阻塞与对话框关联的窗口，但是依然允许用户与程序中其它窗口交互。窗口级别的模态尤其适用于多窗口模式。

Qt中：

- 使用QDialog::exec()实现应用程序级别的模态对话框，

- 使用QDialog::open()实现窗口级别的模态对话框，

- 使用QDialog::show()实现非模态对话框。


在上面的示例中，我们调用了exec()将对话框显示出来，因此这就是一个模态对话框。当对话框出现时，我们不能与主窗口进行任何交互，直到我们关闭了该对话框。

但是，当我们把代码改成下列时，
	
	void MainWindow::open()
	{
	    QDialog dialog(this);
	    dialog.setWindowTitle(tr("Hello, dialog!"));
	    dialog.show(); //或者dialog.open(); 
	}

我们会发现对话框一闪而过。这时因为show()或者open()函数不会阻塞当前线程，对话框会显示出来，然后函数立即返回，代码继续执行。

注意，dialog 是建立在栈上的，show()函数返回，MainWindow::open()函数结束，dialog 超出作用域被析构，因此对话框消失了。

当我们将 dialog 改成堆上建立，就没有这个问题了：

	void MainWindow::open()
	{
	    QDialog *dialog = new QDialog;
	    dialog->setWindowTitle(tr("Hello, dialog!"));
	    dialog->show(); //或者open()
	}

	//注意，这边要把“.”改成“—>” ！！！


但是这样子 dialog 存在内存泄露！dialog 使用 new 在堆上分配空间，却一直没有 delete。

解决方案：

	void MainWindow::open()
	{
	    QDialog *dialog = new QDialog;
	    dialog->setAttribute(Qt::WA_DeleteOnClose);
	    dialog->setWindowTitle(tr("Hello, dialog!"));
	    dialog->show();
	}

setAttribute()函数设置对话框关闭时，自动销毁对话框。

另外，QObject还有一个deleteLater()函数，该函数会在当前事件循环结束时销毁该对话框（具体到这里，需要使用exec()开始一个新的事件循环）。关于事件循环，我们会在后面的文章中详细说明。