---
layout: post
title: "Qt-event()" 
comments: true
share: true
tags: Qt
---




事件对象创建完毕后，Qt 将这个事件对象传递给QObject的event()函数。event()函数并不直接处理事件，而是将这些事件对象按照它们不同的类型，分发给不同的事件处理器（event handler）。

如果你希望在事件分发之前做一些操作，就可以重写这个event()函数了。例如，我们希望在一个QWidget组件中监听 tab 键的按下，那么就可以继承QWidget，并重写它的event()函数，来达到这个目的：

	//CustomWidget是一个普通的QWidget子类。
	//如果传入的事件已被识别并且处理，则需要返回 true，否则返回false。
	bool CustomWidget::event(QEvent *e) //参数即需要转发的事件对象
	{
	    if (e->type() == QEvent::KeyPress) {
	        QKeyEvent *keyEvent = static_cast<QKeyEvent *>(e);//把e强制类型转化为QKeyEvent *
	        if (keyEvent->key() == Qt::Key_Tab) {
	            qDebug() << "You press tab.";	
	            return true;
	        }
	    }
	    return QWidget::event(e);
	//我们处理过自己感兴趣的事件之后，可以直接返回 true，表示我们已经对此事件进行了处理；
	//对于其它我们不关心的事件，则需要调用父类的event()函数继续转发，否则这个组件就只能处理我们定义的事件了。
	}

如果返回值是 true，并且，该事件对象设置了accept()，那么 Qt 会认为这个事件已经处理完毕，不会再将这个事件发送给其它对象，而是会继续处理事件队列中的下一事件。


注意，在event()函数中，调用事件对象的accept()和ignore()函数是没有作用的，不会影响到事件的传播。

我们可以通过使用QEvent::type()函数可以检查事件的实际类型，其返回值是QEvent::Type类型的枚举。


Qt 5 中QObject::event()函数的源代码：

	bool QObject::event(QEvent *e)
	{
	    switch (e->type()) {
	    case QEvent::Timer:
	        timerEvent((QTimerEvent*)e);
	        break;
	 
	    case QEvent::ChildAdded:
	    case QEvent::ChildPolished:
	    case QEvent::ChildRemoved:
	        childEvent((QChildEvent*)e);
	        break;
	    // ...
	    default:
	        if (e->type() >= QEvent::User) {
	            customEvent(e);
	            break;
	        }
	        return false;
	    }
	    return true;
	}

同前面我们所说的一样，Qt 也是使用QEvent::type()判断事件类型，然后调用了特定的事件处理器。比如，如果event->type()返回值是QEvent::Timer，则调用timerEvent()函数。

QWidget::event()中也有如下的代码：

	switch (event->type()) {
	    case QEvent::MouseMove:
	        mouseMoveEvent((QMouseEvent*)event);
	        break;
	    // ...
	}
		
timerEvent()和mouseMoveEvent()这样的函数，就是事件处理器 event handler。

也就是说，event()函数中实际是通过事件处理器来响应一个具体的事件。这相当于event()函数将具体事件的处理“委托”给具体的事件处理器。而这些事件处理器是 protected virtual 的，因此，我们重写了某一个事件处理器，即可让 Qt 调用我们自己实现的版本。

由此可以见，event()是一个集中处理不同类型的事件的地方。

重写 event()函数的作用：屏蔽掉某些不需要的事件处理器。比如一个只能响应 tab 键的组件。