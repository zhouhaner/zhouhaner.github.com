---
layout: post
title: "Qt-事件" 
comments: true
share: true
tags: Qt
---


事件（event）是由系统或者 Qt 本身在不同的时刻发出的。当用户按下鼠标、敲下键盘，或者是窗口需要重新绘制的时候，都会发出一个相应的事件。一些事件在对用户操作做出响应时发出，如键盘事件等；另一些事件则是由系统自动发出，如计时器事件。

事件也就是我们通常说的“事件驱动（event drive）”程序设计的基础概念。事件的出现，使得程序代码不会按照原始的线性顺序执行。

没有事件，程序将阻塞在那里，不执行任何代码。

在 Qt 中，事件的概念似乎同信号槽类似。在 Qt 中，我们关心的更多的是事件关联的一个信号。

信号由具体的对象发出，然后会马上交给由connect()函数连接的槽进行处理；

而对于事件，Qt 使用一个事件队列对所有发出的事件进行维护，当新的事件产生时，会被追加到事件队列的尾部。前一个事件完成后，取出后面的事件进行处理。但是，必要的时候，Qt 的事件也可以不进入事件队列，而是直接处理。

信号一旦发出，对应的槽函数一定会被执行。但是，事件则可以使用“事件过滤器”进行过滤，对于有些事件进行额外的处理，另外的事件则不关心。

- 如果我们使用组件，我们关心的是信号槽；

- 如果我们自定义组件，我们关心的是事件。

当事件发生时，Qt 将创建一个事件对象。Qt 中所有事件类都继承于QEvent。在事件对象创建完毕后，Qt 将这个事件对象传递给QObject的event()函数。event()函数并不直接处理事件，而是按照事件对象的类型分派给特定的事件处理函数（event handler）。

在所有组件的父类QWidget中，定义了很多事件处理的回调函数，如keyPressEvent()、keyReleaseEvent()、mouseDoubleClickEvent()、mouseMoveEvent()、mousePressEvent()、mouseReleaseEvent()等。这些函数都是 protected virtual 的，也就是说，我们可以在子类中重新实现这些函数。

## mouse.h ##

	#ifndef MOUSE
	#define MOUSE
	
	class EventLabel : public QLabel //继承了QLabel
	{
	protected:
	    void mouseMoveEvent(QMouseEvent *event);
	    void mousePressEvent(QMouseEvent *event);
	    void mouseReleaseEvent(QMouseEvent *event);
	//覆盖了mousePressEvent()、mouseMoveEvent()和MouseReleaseEvent()三个函数。
	};
	
	
	void EventLabel::mouseMoveEvent(QMouseEvent *event)
	{
	    //QLabel是支持 HTML 代码的，因此我们直接使用了 HTML 代码来格式化文字。

	    this->setText(QString("<center><h1>Move: (%1, %2)</h1></center>")

	    //QString的arg()函数可以自动替换掉QString中出现的占位符。
	    //语句将会使用 x 替换 %1，y 替换 %2，因此，这个语句生成的QString为 [x, y]。
	                  .arg(QString::number(event->x()), QString::number(event->y())));
	}
	//例如：QString("[%1, %2]").arg(x, y);  语句将会使用 x 替换 %1，y 替换 %2，因此，这个语句生成的QString为 [x, y]。
	
	void EventLabel::mousePressEvent(QMouseEvent *event)
	{
	    this->setText(QString("<center><h1>Press: (%1, %2)</h1></center>")
	                  .arg(QString::number(event->x()), QString::number(event->y())));
	}
	
	void EventLabel::mouseReleaseEvent(QMouseEvent *event)
	{
	    QString msg;
	    msg.sprintf("<center><h1>Release: (%d, %d)</h1></center>",
	                event->x(), event->y());
	    this->setText(msg);
	}
	
	#endif // MOUSE
	


## main.cpp: ##

	#include "mainwindow.h"
	#include <QApplication>
	#include <QtGui>
	#include <QtWidgets>
	#include "mouse.h"
	int main(int argc, char *argv[])
	{
	    QApplication a(argc, argv);
	    EventLabel *label = new EventLabel;
	    label->setWindowTitle("MouseEvent Demo");
	    label->resize(300, 200);
	    label->show();
	
	    return a.exec();
	}


![](http://files.devbean.net/images/2012/09/eventlabel-demo.png)


要点击鼠标之后才能在mouseMoveEvent()函数中显示鼠标坐标值.

这是因为QWidget中有一个mouseTracking属性，该属性用于设置是否追踪鼠标。只有鼠标被追踪时，mouseMoveEvent()才会发出。如果mouseTracking是 false（默认即为false），则组件在至少一次鼠标点击之后，才能够被追踪，也就是能够发出mouseMoveEvent()事件。如果mouseTracking为 true，则mouseMoveEvent()直接可以被发出。

把main里的内容加上下面所示的  label->setMouseTracking(true); 就行了。

	EventLabel *label = new EventLabel;
	label->setWindowTitle("MouseEvent Demo");
	label->resize(300, 200);
	label->setMouseTracking(true);
	label->show();


