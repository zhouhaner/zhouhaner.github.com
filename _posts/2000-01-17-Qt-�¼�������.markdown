---
layout: post
title: "Qt-事件过滤器" 
comments: true
share: true
tags: Qt
---


有时候，对象需要查看、甚至要拦截发送到另外对象的事件。例如，对话框可能想要拦截按键事件，不让别的组件接收到；或者要修改回车键的默认处理。

QObject有一个eventFilter()函数，用于建立事件过滤器。这个函数的签名如下：

    virtual bool QObject::eventFilter ( QObject * watched, QEvent * event );

所谓事件过滤器，可以理解成一种过滤代码。检查接收到的事件。如果这个事件是我们感兴趣的类型，就进行我们自己的处理；如果不是，就继续转发。

这个函数返回一个 bool 类型，如果你想将参数 event 过滤出来，比如，不想让它继续转发，就返回 true，否则返回 false。

事件过滤器调用所谓时间在目标对象（即参数里面的watched对象）接收到事件对象之前。也就是说，如果你在事件过滤器中停止了某个事件，那么，watched对象以及以后所有的事件过滤器根本不会知道这么一个事件。


## mainwindow.h ##

	#ifndef MAINWINDOW_H
	#define MAINWINDOW_H
	#include <QtGui>
	#include <QtWidgets>
	#include <QMainWindow>
	
	class MainWindow : public QMainWindow
	{
	    Q_OBJECT
	
	public:
	    MainWindow(QWidget *parent = 0);//重写它的eventFilter()函数。
	    ~MainWindow();
	
	protected:
	     bool eventFilter(QObject *obj, QEvent *event);  
		 //这个过滤器是protected的，及只能该类及其子类才能安装这个过滤器
	private:
	     QTextEdit *textEdit;
	};
	
	#endif // MAINWINDOW_H

## mainwindow.cpp ##

	#include "mainwindow.h"
	
	MainWindow::MainWindow(QWidget *parent)
	    : QMainWindow(parent)
	{
	    textEdit = new QTextEdit;
	    setCentralWidget(textEdit);
	
	    textEdit->installEventFilter(this);//安装事件过滤器！！！（别忘了安装）
	}
	
	MainWindow::~MainWindow()
	{
	
	}
	
	bool MainWindow::eventFilter(QObject *obj, QEvent *event)
	 {
	     if (obj == textEdit) { //首先判断这个对象是不是我们感兴趣的组件
	         if (event->type() == QEvent::KeyPress) { //然后判断这个事件的类型
	             //这里我们设置成不想让textEdit组件处理键盘按下的事件。
	             QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);
	             qDebug() << "Ate key press" << keyEvent->key();
	             return true; //表示处理掉了这个事件，这个事件也就被吞掉了
	         } 
	         else {  
	             return false; //这个事件不是我们要过滤的事件，所以该事件继续处理，所以返回 false
	         }
	     } 
	     else {
	         // pass the event on to the parent class
	         return QMainWindow::eventFilter(obj, event);
	         //对于其它的组件，我们并不保证是不是也需要过滤器，于是最保险的办法是调用父类的函数去判断。
	     }
	 }



eventFilter()函数相当于创建了过滤器，然后我们需要安装这个过滤器。安装过滤器需要调用QObject::installEventFilter()函数。这个函数的签名如下：


    void QObject::installEventFilter ( QObject * filterObj )

这个函数接受一个QObject *类型的参数。eventFilter()函数是QObject的一个成员函数，因此，任意QObject都可以作为事件过滤器（问题在于，如果你没有重写eventFilter()函数，这个事件过滤器是没有任何作用的，因为
**默认的事件过滤器是什么都不会过滤**）。

已经存在的过滤器则可以通过QObject::removeEventFilter()函数移除。

我们可以向一个对象上面安装多个事件处理器，只要调用多次installEventFilter()函数。如果一个对象存在多个事件过滤器，那么，最后一个安装的会第一个执行，也就是后进先执行的顺序。

事件过滤器的强大之处在于，我们可以为整个应用程序添加一个事件过滤器。

因为 installEventFilter()函数是QObject的函数，而QApplication或者QCoreApplication对象都是QObject的子类，因此，我们可以向QApplication或者QCoreApplication添加事件过滤器。

这种全局的事件过滤器将会在所有其它特性对象的事件过滤器之前调用。但这种行为会严重降低整个应用程序的事件分发效率。因此，除非是不得不使用的情况，否则的话我们不应该这么做。

事件过滤器和被安装过滤器的组件必须在同一线程，否则，过滤器将不起作用。另外，如果在安装过滤器之后，这两个组件到了不同的线程，那么，只有等到二者重新回到同一线程的时候过滤器才会有效。

