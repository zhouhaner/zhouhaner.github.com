---
layout: post
title: "Qt-对话框数据传递" 
comments: true
share: true
tags: Qt
---


对话框的出现用于完成一个简单的或者是短期的任务。对话框与主窗口之间的数据交互相当重要

模态对话框使用了exec()函数将其显示出来。exec()函数的真正含义是开启一个新的事件循环。

所谓事件循环，可以理解成一个无限循环。Qt 在开启了事件循环之后，系统发出的各种事件才能够被程序监听到。这个事件循环相当于一种轮询的作用。

既然是无限循环，当然在开启了事件循环的地方，代码就会被阻塞，后面的语句也就不会被执行到。因此，对于使用了exec()显示的模态对话框，我们可以在exec()函数之后直接从对话框的对象获取到数据值。

既然是无限循环，当然在开启了事件循环的地方，代码就会被阻塞，后面的语句也就不会被执行到。因此，对于使用了exec()显示的模态对话框，我们可以在exec()函数之后直接从对话框的对象获取到数据值。


## mainwindow.cpp ##

	#include "mainwindow.h"
	#include "ui_mainwindow.h"
	#include <QDialog>
	#include <QDebug>
	MainWindow::MainWindow(QWidget *parent) :
	    QMainWindow(parent),
	    ui(new Ui::MainWindow)
	{
	    ui->setupUi(this);
	
	    setWindowTitle(tr("Main Window"));
	
	    openAction = new QAction(QIcon(":/images/doc-open"),tr("Open..."),this);
	    openAction->setShortcuts(QKeySequence::Open);
	    openAction->setStatusTip(tr("Open an existing file"));
	    connect(openAction, &QAction::triggered, this, &MainWindow::open);
	
	    QMenu *file = menuBar()->addMenu(tr("&File"));
	    file->addAction(openAction);
	
	    QToolBar *toolBar = addToolBar(tr("&File"));
	    toolBar->addAction(openAction);
	
	}
	
	MainWindow::~MainWindow()
	{
	    delete ui;
	}
	//以上代码和之前一样
	
	void MainWindow::open(){
	
	    //用QDialog创建了一个对话框，设置其标题为“Hello, dialog!”，然后调用exec()将其显示出来。
	    QDialog dialog(this);
	    dialog.setWindowTitle(tr("Hello, dialog!"));
	    dialog.exec();
	    //在exec()函数之后，我们直接可以获取到 dialog 的数据值。
	    //直到对话框关闭，exec()函数返回，此时，我们就可以取得对话框的数据。
	    qDebug() << dialog.result();
	}

需要注意的一点是，如果我们设置 dialog 的属性为WA_DeleteOnClose，那么当对话框关闭时，对象被销毁，我们就不能使用这种办法获取数据了。在这种情况下，我们可以考虑使用 parent 指针的方式构建对话框，避免设置WA_DeleteOnClose属性；或者是利用另外的方式。

实际上，QDialog::exec()是有返回值的，其返回值是QDialog::Accepted或者QDialog::Rejected。一般我们会使用类似下面的代码:

	QDialog dialog(this);
	if (dialog.exec() == QDialog::Accepted) {
	    // do something
	} else {
	    // do something else
	}

来判断对话框的返回值，也就是用户是点击了“确定”还是“取消”。更多细节请参考QDialog文档。

如果是非模态对话框，QDialog::show()函数会立即返回，如果我们也这么写，就不可能取得用户输入的数据。因为show()函数不会阻塞主线程，show()立即返回，用户还没有来得及输入，就要执行后面的代码，当然是不会有正确结果的。这时我们就要使用信号槽机制。

由于非模态对话框在关闭时可以调用QDialog::accept()或者QDialog::reject()或者更通用的QDialog::done()函数，所以我们可以在这里发出信号。

另外，如果找不到合适的信号发出点，我们可以重写QDialog::closeEvent()函数，在这里发出信号。在需要接收数据的窗口（这里是主窗口）连接到这个信号即可。

	// in dialog:
	void UserAgeDialog::accept()
	{
	    emit userAgeChanged(newAge); // newAge is an int
	    QDialog::accept();
	}
	 
	// in main window:
	void MainWindow::showUserAgeDialog()
	{
	    UserAgeDialog *dialog = new UserAgeDialog(this);
	    connect(dialog, &UserAgeDialog::userAgeChanged, this, &MainWindow::setUserAge);
	    dialog->show();
	}
	 
	// ...
	 
	void MainWindow::setUserAge(int age)
	{
	    userAge = age;
	}

不要担心如果对话框关闭，是不是还能获取到数据。因为 Qt 信号槽的机制保证，在槽函数在调用的时候，我们始终可以使用sender()函数获取到 signal 的发出者。

关于sender()函数，可以在文档中找到更多的介绍。顺便说一句，sender()函数的存在使我们可以利用这个函数，来实现一个只能打开一个的非模态对话框（方法就是在对话框打开时在一个对话框映射表中记录下标记，在对话框关闭时利用sender()函数判断是不是该对话框，然后从映射表中将其删除）。