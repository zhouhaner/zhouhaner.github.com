---
layout: post
title: "Qt-菜单栏、工具栏和状态栏" 
comments: true
share: true
tags: Qt
---


Qt 将用户与界面进行交互的元素抽象为一种“动作”，使用QAction类表示。QAction可以添加到菜单上、工具栏上。

我们假设窗口还是建立在QMainWindow类之上，这会让我们的开发简单许多。在实际开发过程中，QMainWindow通常只作为“主窗口”，对话框窗口则更多地使用QDialog类。我们会在后面看到，QDialog类会缺少一些QMainWindow类提供方便的函数，比如menuBar()以及toolBar()。

继续使用《添加动作》一文中的代码：



## mainwindow.cpp ##

	#include "mainwindow.h"
	#include "ui_mainwindow.h"
	#include <QAction>
	#include <QMenuBar>
	#include <QMessageBox>
	#include <QStatusBar>
	#include <QToolBar>

	MainWindow::MainWindow(QWidget *parent) : //构造函数
	    QMainWindow(parent),
	    ui(new Ui::MainWindow)
	{
	    ui->setupUi(this);  //系统默认的
	
	    setWindowTitle(tr("Main Window"));
	    openAction = new QAction(QIcon(":/images/document-open.png"),tr("&Open..."), this);
	    openAction->setShortcut(QKeySequence::Open);
	    openAction->setStatusTip(tr("Open an existing file"));
	
	    connect(openAction,&QAction::triggered,this,&MainWindow::open);
	
	    //使用menuBar()函数，Qt 为我们创建了一个菜单栏。menuBar()是QMainWindow提供的函数
	    //menuBar()函数会返回窗口的菜单栏，如果没有菜单栏则会新创建一个。
	    //所以在并没有创建一个菜单栏对象的时候就可以直接利用它的返回值来进行操作！
	    //Qt 中，表示菜单的类是QMenuBar。QMenuBar代表的是窗口最上方的一条菜单栏。
	    //我们使用其addMenu()函数为其添加菜单。提供了一个字符串作为参数，将其作为新创建的菜单的文本显示出来。
	    //至于 & 符号，可以为菜单创建一个快捷键。
	    QMenu *file = menuBar()->addMenu((tr("&File")));
	    file->addAction(openAction);
	
	    //QToolBar部分非常类似。但使用的是addToolBar()函数添加新工具栏。
	    //之所以与前面不同是因为一个窗口只有一个菜单栏，但是却可能有多个工具栏
	    //工具栏可以设置成固定的、浮动的等等，具体设置可以参考 Qt 文档。
	    QToolBar *toolBar = addToolBar(tr("&File"));
	    toolBar->addAction(openAction);
	
	    QToolBar *toolBar2 = addToolBar(tr("Tool Bar 2"));
	    toolBar2->addAction(openAction);
	    
	    //添加状态栏只要这么一个函数就够了
	    //因为这个函数会返回一个QStatusBar对象，如果没有则先创建再返回。
	    //有关QStatusBar的更多信息，请参考 Qt 文档。
	    statusBar();
	}
	
	MainWindow::~MainWindow()
	{
	    delete ui;
	}


	void MainWindow::open(){
	    QMessageBox::information(this,tr("Information"),tr("Open"));
	}




特别注意！！！

头文件里要加个openAction的成员才能正确编译！！！


## mainwindow.h ##

	#ifndef MAINWINDOW_H
	#define MAINWINDOW_H
	
	#include <QMainWindow>
	
	namespace Ui {
	class MainWindow;
	}
	
	class MainWindow : public QMainWindow
	{
	    Q_OBJECT
	
	public:
	    explicit MainWindow(QWidget *parent = 0);
	    ~MainWindow();
	
	private:
	    void open();   
	    QAction *openAction; //这两个东西切记别忘了！！！
	    Ui::MainWindow *ui;
	};
	
	#endif // MAINWINDOW_H
