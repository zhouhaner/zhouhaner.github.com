---
layout: post
title: "Qt-自定义事件" 
comments: true
share: true
tags: Qt
---


自定义事件可以用在单线程的程序中，作为一种对象间通讯的机制。多线程的程序中也尤其有用。

为什么需要使用事件，而不是信号槽呢？主要原因是，事件的分发既可以是同步的，又可以是异步的，而函数的调用或者说是槽的回调总是同步的。事件的另外一个好处是，它可以使用过滤器。

Qt 自定义事件需要继承 QEvent 类，最重要的是提供一个QEvent::Type类型的参数，作为自定义事件的类型值。

QEvent::Type是QEvent定义的一个枚举。因此，我们可以传递一个 int 值。但是需要注意的是，我们的自定义事件类型不能和已经存在的 type 值重复，否则会有不可预料的错误发生。

因为系统会将你新增加的事件当做系统事件进行派发和调用。在 Qt 中，系统保留 0 – 999 的值，也就是说，你的事件 type 要大于 999。这种数值当然非常难记，所以 Qt 定义了两个边界值：QEvent::User和QEvent::MaxUser。我们的自定义事件的 type 应该在这两个值的范围之间。其中，QEvent::User的值是 1000，QEvent::MaxUser的值是 65535。从这里知道，我们最多可以定义 64536 个事件。

通过这两个枚举值，我们可以保证我们自己的事件类型不会覆盖系统定义的事件类型。但是，这样并不能保证自定义事件相互之间不会被覆盖。

为了解决这个问题，Qt 提供了一个函数：registerEventType()，用于自定义事件的注册。该函数签名如下：


    static int QEvent::registerEventType ( int hint = -1 );

这个函数是 static 的，因此可以使用QEvent类直接调用。函数接受一个 int 值，其默认值是 -1；函数返回值是向系统注册的新的 Type 类型的值。如果 hint 是合法的，也就是说这个 hint 不会发生任何覆盖（系统的以及其它自定义事件的），则会直接返回这个值；否则，系统会自动分配一个合法值并返回。因此，使用这个函数即可完成 type 值的指定。这个函数是线程安全的，不必另外添加同步。

我们可以在QEvent子类中添加自己的事件所需要的数据，然后进行事件的发送。Qt 中提供了两种事件发送方式：


1.

	static bool QCoreApplication::sendEvent(QObject *receiver,
	                                        QEvent *event);

直接将event事件发送给receiver接受者，使用的是QCoreApplication::notify()函数。函数返回值就是事件处理函数的返回值。在事件被发送的时候，event对象并不会被销毁。通常我们会在栈上创建event对象，例如：

	QMouseEvent event(QEvent::MouseButtonPress, pos, 0, 0, 0);
	QApplication::sendEvent(mainWindow, &event);



2.

	static void QCoreApplication::postEvent(QObject *receiver,
	                                        QEvent *event);

将event事件及其接受者receiver一同追加到事件队列中，函数立即返回。
因为 post 事件队列会持有事件对象，并且在其 post 的时候将其 delete 掉，**因此，我们必须在堆上创建event对象**。当对象被发送之后，再试图访问event对象就会出现问题（因为 post 之后，event对象就会被 delete）。

当控制权返回到主线程循环时，保存在事件队列中的所有事件都通过notify()函数发送出去。

事件会根据 post 的顺序进行处理。如果你想要改变事件的处理顺序，可以考虑为其指定一个优先级。默认的优先级是Qt::NormalEventPriority。

这个函数是线程安全的。




----------

现在已经能够将事件发送出去，还剩下最后一步：处理自定义事件。

我们可以重写QObject::customEvent()函数，该函数接收一个QEvent对象作为参数：


    void QObject::customEvent(QEvent *event);

可以通过转换 event 对象类型来判断不同的事件：

	void CustomWidget::customEvent(QEvent *event) {
	    CustomEvent *customEvent = static_cast<CustomEvent *>(event);
	    // ...
	}

也可以在event()函数中直接处理：

	bool CustomWidget::event(QEvent *event) {
	    if (event->type() == MyCustomEventType) {
	        CustomEvent *myEvent = static_cast<CustomEvent *>(event);
	        // processing...
	        return true;
	    }
	    return QWidget::event(event);
	}